{"version":3,"sources":["constants.js","components/Tasks.js","AC/index.js","components/TaskManager.js","reducer/tasks.js","reducer/index.js","store/index.js","App.js","serviceWorker.js","index.js"],"names":["ADD_TASK","DELETE_TASK","DATA_STORAGE","Tasks","handleDeleteTask","deleteId","_this","props","deleteTask","nextProps","this","saveToLocalStorage","tasks","newTasks","JSON","stringify","localStorage","setItem","saveTasks","parse","getItem","dataStorage","_this2","react_default","a","createElement","className","Grid_default","container","spacing","map","item","key","id","xs","Paper_default","onClick","text","Component","connect","state","type","C","payload","arr","TaskManager","handleChange","event","setState","Object","defineProperty","target","value","handleAddTask","newTask","Date","now","valueTextarea","classes","TextField_default","textField","label","multiline","variant","onChange","Button_default","color","Divider_default","components_Tasks","withStyles","theme","margin","defaultState","combineReducers","arguments","length","undefined","action","concat","toConsumableArray","filter","enhancer","applyMiddleware","thunk","store","createStore","reducer","window","App","es","BrowserRouter","Switch","Route","path","component","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.74a69b38.chunk.js","sourcesContent":["export const ADD_TASK = 'ADD_TASK';\r\nexport const DELETE_TASK = 'DELETE_TASK';\r\nexport const DATA_STORAGE = 'VALUE_STORAGE';\r\n","import React, { Component } from 'react';\r\nimport {deleteTask, dataStorage} from '../AC';\r\nimport {connect} from 'react-redux';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\nclass Tasks extends Component {\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    this.saveToLocalStorage(nextProps.tasks)\r\n  }\r\n\r\n  saveToLocalStorage(newTasks) {\r\n    const tasks = JSON.stringify(newTasks)\r\n    localStorage.setItem('newTasks', tasks)\r\n  }\r\n\r\n  componentWillMount() {\r\n    const saveTasks = JSON.parse(localStorage.getItem('newTasks'));\r\n    saveTasks && this.props.dataStorage(saveTasks);\r\n  }\r\n\r\n  handleDeleteTask = (deleteId) => {\r\n    this.props.deleteTask(deleteId);\r\n  };\r\n\r\n  render () {\r\n    const {tasks} = this.props;\r\n    return (\r\n      <div className=\"boxes\">\r\n        <Grid container spacing={16}>\r\n          {tasks.map(item => {\r\n            return (\r\n              <Grid key={item.id} item xs={4}>\r\n                <Paper className=\"box-wrap\">\r\n                  <span\r\n                    className=\"close\"\r\n                    onClick={() => this.handleDeleteTask(item.id)}>\r\n                    <i className=\"material-icons\">close</i>\r\n                  </span>\r\n                  <p>{item.text}</p>\r\n                </Paper>\r\n              </Grid>\r\n            )\r\n          })}\r\n        </Grid>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect((state) => ({\r\n  tasks: state.tasks\r\n}), {deleteTask, dataStorage})(Tasks)\r\n","import * as C from '../constants';\r\n\r\nexport function valueTextarea(state) {\r\n  return {\r\n    type: C.ADD_TASK,\r\n    payload: state\r\n  }\r\n}\r\n\r\nexport function deleteTask(id) {\r\n  return {\r\n    type: C.DELETE_TASK,\r\n    payload: id\r\n  }\r\n}\r\n\r\nexport function dataStorage(arr) {\r\n  return {\r\n    type: C.DATA_STORAGE,\r\n    payload: arr\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport {valueTextarea} from '../AC';\r\nimport {connect} from 'react-redux';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Tasks from './Tasks';\r\n\r\nconst styles = theme => ({\r\n  textField: {\r\n    margin: '0 20px 30px 0',\r\n  }\r\n});\r\n\r\nclass TaskManager extends Component {\r\n\r\n  state = {\r\n    text: ''\r\n  }\r\n\r\n  handleChange = type => event => {\r\n    this.setState({\r\n      [type]: event.target.value\r\n    })\r\n  };\r\n\r\n  handleAddTask = () => {\r\n    if (this.state.text) {\r\n      const newTask = {\r\n        text: this.state.text,\r\n        id: Date.now()\r\n      };\r\n      this.props.valueTextarea(newTask);\r\n      this.setState({text: ''});\r\n    }\r\n  };\r\n\r\n  render () {\r\n    const {classes} = this.props;\r\n    return (\r\n      <Paper className=\"wrap\">\r\n        <TextField\r\n          className={classes.textField}\r\n          label=\"Describe the task\"\r\n          multiline\r\n          variant=\"outlined\"\r\n          onChange={this.handleChange('text')}\r\n          value={this.state.text}\r\n        />\r\n        <Button\r\n          variant=\"outlined\"\r\n          color=\"primary\"\r\n          onClick={this.handleAddTask}>\r\n          add task\r\n        </Button>\r\n        <Divider />\r\n        <Tasks />\r\n      </Paper>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(null, {valueTextarea})(withStyles(styles)(TaskManager))\r\n","import * as C from '../constants';\r\n\r\nconst defaultState = []\r\n\r\nexport default (state = defaultState, action) => {\r\n  const {type, payload} = action\r\n  switch (type) {\r\n    case C.ADD_TASK: return [payload, ...state]\r\n    case C.DELETE_TASK: return state.filter(item => item.id !== payload)\r\n    case C.DATA_STORAGE: return state = payload\r\n  }\r\n\r\n  return state\r\n}\r\n","import {combineReducers} from 'redux';\r\nimport tasks from './tasks';\r\n\r\nexport default combineReducers({\r\n  tasks\r\n})\r\n","import {createStore, applyMiddleware} from 'redux';\r\nimport reducer from '../reducer';\r\nimport thunk from 'redux-thunk';\r\n\r\nconst enhancer = applyMiddleware(thunk)\r\n\r\nconst store = createStore(reducer, {}, enhancer)\r\n\r\nwindow.store = store\r\n\r\nexport default store\r\n","import React, { Component } from 'react';\nimport TaskManager from './components/TaskManager';\nimport {Provider} from 'react-redux';\nimport {Switch, Route, BrowserRouter as Router} from 'react-router-dom';\nimport store from './store';\nimport './style.css';\n\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <Router>\n          <Switch>\n            <Route path='/' component={TaskManager} />\n          </Switch>\n        </Router>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}